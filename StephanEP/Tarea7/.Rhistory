library(tidyverse)
library(ez)
library(ggpubr)
library(dplyr)
library(nlme)
library(emmeans)
# Obtención de datos
datos = read.csv("EP07 Datos.csv")
datosP1 = datos %>% filter(n.nodos > 65)
set.seed(73)
datosP1B = sample(datosP1$tiempo.B, size = 24)
datosP1C = sample(datosP1$tiempo.C, size = 20)
print(shapiro.test(datosP1$tiempo.B))
print(shapiro.test(datosP1$tiempo.C))
alfa = 0.05
prueba = wilcox.test(datosP1B, datosP1C, alternative = "two.sided", conf.level = 1 - alfa)
print(prueba)
set.seed(13)
datosP2 = datosP1 %>% select(instancia, mejor.A, mejor.B) %>% sample_n(22)
datosP2A = datosP2$datosP2A
datosP2B = datosP2$datosP2B
prueba = wilcox.test(datosP2A, datosP2B, paired = TRUE, alternative = "two.sided", conf.level = 0.95)
View(datosP2)
set.seed(13)
# Selección de 22 instancias con rendimiento de las versiones A y B
datosP2 = datosP1 %>% select(instancia, mejor.A, mejor.B) %>% sample_n(22)
# Asignación de las columnas correctamente
datosP2A = datosP2$mejor.A
datosP2B = datosP2$mejor.B
# Prueba de Wilcoxon pareada
prueba = wilcox.test(datosP2A, datosP2B, paired = TRUE, alternative = "two.sided", conf.level = 0.95)
print(prueba)
View(datos)
datosDiffAB = datosP2A - datosP2B
print(shapiro.test(datosDiffAB))
# Prueba de Wilcoxon pareada
prueba = wilcox.test(datosP2A, datosP2B, paired = TRUE,
alternative = "two.sided", conf.level = 0.95)
print(prueba)
print(shapiro.test(datosP3$tiempo.A))
datosP3 = datos %>% filter(n.nodos > 50)
set.seed(31)
datosP3A = sample(datosP3$tiempo.A, size = 15)
datosP3B = sample(datosP3$tiempo.B, size = 14)
datosP3C = sample(datosP3$tiempo.C, size = 13)
print(shapiro.test(datosP3$tiempo.A))
print(shapiro.test(datosP3$tiempo.B))
print(shapiro.test(datosP3$tiempo.C))
library(tidyverse)
library(ez)
library(ggpubr)
library(dplyr)
library(nlme)
library(emmeans)
# Obtención de datos
datos = read.csv("EP07 Datos.csv")
datosP1 = datos %>% filter(n.nodos > 65)
set.seed(73)
datosP1B = sample(datosP1$tiempo.B, size = 24)
datosP1C = sample(datosP1$tiempo.C, size = 20)
print(shapiro.test(datosP1$tiempo.B))
print(shapiro.test(datosP1$tiempo.C))
alfa = 0.05
prueba = wilcox.test(datosP1B, datosP1C, alternative = "two.sided", conf.level = 1 - alfa)
print(prueba)
set.seed(13)
# Selección de 22 instancias con rendimiento de las versiones A y B
datosP2 = datosP1 %>% select(instancia, mejor.A, mejor.B) %>% sample_n(22)
# Asignación de las columnas correctamente
datosP2A = datosP2$mejor.A
datosP2B = datosP2$mejor.B
datosDiffAB = datosP2A - datosP2B
print(shapiro.test(datosDiffAB))
# Prueba de Wilcoxon pareada
prueba = wilcox.test(datosP2A, datosP2B, paired = TRUE,
alternative = "two.sided", conf.level = 0.95)
print(prueba)
datosP3 = datos %>% filter(n.nodos > 50)
set.seed(31)
datosP3A = sample(datosP3$tiempo.A, size = 15)
datosP3B = sample(datosP3$tiempo.B, size = 14)
datosP3C = sample(datosP3$tiempo.C, size = 13)
print(shapiro.test(datosP3$tiempo.A))
print(shapiro.test(datosP3$tiempo.B))
print(shapiro.test(datosP3$tiempo.C))
#Modificación de los datos necesaria para efectuar la prueba
TiempoP3 <- c(P3A, P3B, P3C)
# Filtrado de datos
datosP3 <- datos %>% filter(n.nodos > 50)
set.seed(31)
P3A <- sample(datosP3$tiempo.A, size = 15)
P3B <- sample(datosP3$tiempo.B, size = 14)
P3C <- sample(datosP3$tiempo.C, size = 13)
#Modificación de los datos necesaria para efectuar la prueba
TiempoP3 <- c(P3A, P3B, P3C)
VersionP3 <- c(rep("A", length(P3A)), rep("B", length(P3B)),
rep("C", length(P3C)))
VersionP3 <- factor(Version)
#Modificación de los datos necesaria para efectuar la prueba
TiempoP3 <- c(P3A, P3B, P3C)
VersionP3 <- c(rep("A", length(P3A)), rep("B", length(P3B)),
rep("C", length(P3C)))
VersionP3 <- factor(VersionP3)
datosP3 <- data.frame(TiemposP3, VersionP3)
#Modificación de los datos necesaria para efectuar la prueba
TiempoP3 <- c(P3A, P3B, P3C)
VersionP3 <- c(rep("A", length(P3A)), rep("B", length(P3B)),
rep("C", length(P3C)))
VersionP3 <- factor(VersionP3)
datosP3 <- data.frame(TiempoP3, VersionP3)
alfa <-0.01
# Prueba de Kruskal-Wallis
prueba <- kruskal.test(TiempoP3 ~ VersionP3, data = datosP3)
print(prueba)
#Modificación de los datos necesaria para efectuar la prueba
TiempoP3 <- c(P3A, P3B, P3C)
VersionP3 <- c(rep("A", length(P3A)), rep("B", length(P3B)),
rep("C", length(P3C)))
VersionP3 <- factor(VersionP3)
datosP3 <- data.frame(TiempoP3, VersionP3)
alfa <-0.01
# Prueba de Kruskal-Wallis
pruebaP3 <- kruskal.test(TiempoP3 ~ VersionP3, data = datosP3)
print(pruebaP3)
post_hocP3 <- pairwise.wilcox.test(datos[["TiempoP3"]],
datos[["VersionP3"]],
p.adjust.method = "BH",
paired = FALSE,
exact = FALSE)
print(post_hocP3)
#Modificación de los datos necesaria para efectuar la prueba
TiempoP3 <- c(P3A, P3B, P3C)
VersionP3 <- c(rep("A", length(P3A)), rep("B", length(P3B)),
rep("C", length(P3C)))
VersionP3 <- factor(VersionP3)
datosP3 <- data.frame(TiempoP3, VersionP3)
alfa <-0.01
# Prueba de Kruskal-Wallis
pruebaP3 <- kruskal.test(TiempoP3 ~ VersionP3, data = datosP3)
print(pruebaP3)
post_hocP3 <- pairwise.wilcox.test(datosP3[["TiempoP3"]],
datosP3[["VersionP3"]],
p.adjust.method = "BH",
paired = FALSE,
exact = FALSE)
print(post_hocP3)
